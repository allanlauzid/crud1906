<h1>
    <%= title %>
  </h1>
  
  <!-- Botão para abrir o modal -->
  <a class="btn-floating btn-large waves-effect waves-light red modal-trigger" href="#petModal" onclick="clearForm()">
    <i class="material-icons">add</i>
  </a>
  
  <!-- Modal Structure -->
  <div id="petModal" class="modal">
    <div class="modal-content">
      <h4>Pet</h4>
      <div class="scrollable-content">
        <form id="petForm">
          <input type="hidden" name="id" id="id">
          <div class="input-field">
            <input required name="name" id="name" type="text" class="validate">
            <label for="name">Nome</label>
            <span class="helper-text" data-error="Nome é obrigatório"></span>
          </div>
          <label for="race">Raça</label>
          <div class="input-field">
            <select required name="race" id="race">
              <option value="" disabled selected>Escolha a Raça</option>
              <option value="Poodle">Poodle</option>
              <option value="Vira-lata">Vira-lata</option>
              <option value="Pastor Alemão">Pastor Alemão</option>
              <option value="Outros">Outros</option>
            </select>
            <span class="helper-text" data-error="Raça é obrigatória"></span>
          </div>
          <label for="colour">Cor</label>
          <div class="input-field">
            <select required name="colour" id="colour">
              <option value="" disabled selected>Escolha a Cor</option>
              <option value="Preto">Preto</option>
              <option value="Branco">Branco</option>
              <option value="Marrom">Marrom</option>
              <option value="Outro">Outro</option>
            </select>
            <span class="helper-text" data-error="Cor é obrigatória"></span>
          </div>
          <label for="gender">Sexo</label>
          <div class="input-field">
            <select required name="gender" id="gender">
              <option value="" disabled selected>Escolha o Sexo</option>
              <option value="Macho">Macho</option>
              <option value="Fêmea">Fêmea</option>
            </select>
            <span class="helper-text" data-error="Sexo é obrigatório"></span>
          </div>
        </form>
      </div>
    </div>
    <div class="modal-footer">
      <a href="#!" class="modal-close waves-effect waves-red btn-flat" onclick="clearForm()">
        <i class="material-icons left">cancel</i>Cancelar
      </a>
      <button type="button" class="waves-effect waves-green btn-flat" onclick="submitForm()">
        <i class="material-icons left">send</i>Enviar
      </button>
    </div>
    <span id="error" class="red-text"></span>
  </div>
  
  <% if (error) { %>
  <span class="red-text">
    <%= error %>
  </span>
  <% } %>
  
  <table class="striped table-responsive">
    <thead>
      <tr>
        <% for (let col of cols) { %>
        <th>
          <%= col %>
        </th>
        <% } %>
      </tr>
    </thead>
    <tbody>
      <% for (let pet of pets) { %>
      <tr>
        <% for (let prop in pet) { %>
        <td>
          <%= pet[prop] %>
        </td>
        <% } %>
        <td>
          <a class="btn-floating btn-small waves-effect waves-light blue" onclick="editPet('<%= pet.id %>')">
            <i class="material-icons">edit</i>
          </a>
          <a class="btn-floating btn-small waves-effect waves-light red" onclick="deletePet('<%= pet.id %>')">
            <i class="material-icons">delete</i>
          </a>
        </td>
      </tr>
      <% } %>
    </tbody>
  </table>
  
  <style>
    .scrollable-content {
      max-height: 400px; /* Defina a altura máxima conforme necessário */
      overflow-y: auto;
    }
  </style>
  
  <script>
    const form = document.getElementById('petForm');
  
    function submitForm() {
      if (form.checkValidity()) {
        const pet = mountDataForm();
        let id = pet.id;
        let METHOD = id ? 'PUT' : 'POST';
        let URL = id ? `/pets/${id}` : '/pets';
        createOrUpdate(pet, URL, METHOD);
      } else {
        form.classList.add('was-validated');
        M.updateTextFields();
        form.reportValidity();
      }
    }
  
    // CRIAR OU ATUALIZAR USUÁRIO
    function createOrUpdate(pet, URL, METHOD) {
      fetch(URL, {
          method: METHOD,
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(pet)
        })
        .then(async (res) => await checkError(res))
        .then((pet) => {
          form.reset();
          clearValidationErrors();
          var instance = M.Modal.getInstance(document.getElementById('petModal'));
          instance.close();
          window.location.reload();
        })
        .catch((error) => {
          document.getElementById('error').innerText = error.error;
        });
    }
  
    // BUSCAR USUÁRIO A SER EDITADO PELO ID E CARREGAR NOS INPUTS DO FORM
    function editPet(id) {
      fetch("/pets/" + id, {
          method: "GET"
        })
        .then(async (res) => await checkError(res))
        .then((pet) => {
          clearForm(); // Limpar formulário antes de carregar novos dados
          for (let prop in pet) {
            const input = document.querySelector(`input[name="${prop}"]`);
            if (input) {
              input.value = pet[prop];
              M.updateTextFields();
            }
          }
  
          setTimeout(async () => {
  
            selects = await document.querySelectorAll("div.select-wrapper")
  
            selects[0].querySelector("ul").querySelectorAll("li").forEach((a) => {
              if (a.querySelector("span").innerText == pet.race) {
                $(a).click()
              }
            })
  
            selects[1].querySelector("ul").querySelectorAll("li").forEach((a) => {
              if (a.querySelector("span").innerText == pet.colour) {
                $(a).click()
              }
            })
  
            selects[2].querySelector("ul").querySelectorAll("li").forEach((a) => {
              if (a.querySelector("span").innerText == pet.gender) {
                $(a).click()
              }
            })
          }, 200);
  
          var instance = M.Modal.getInstance(document.getElementById('petModal'));
          instance.open();
        })
        .catch((error) => {
          document.getElementById('error').innerText = error.error;
        });
    }
  
    // DELETAR UM USUÁRIO PELO ID
    function deletePet(id) {
      fetch("/pets/" + id, {
          method: "DELETE"
        })
        .then(async (res) => await checkError(res))
        .then(() => {
          window.location.reload();
        })
        .catch((error) => {
          document.getElementById('error').innerText = error.error;
        });
    }
  
    // CHECAR ERROS NA RESPOSTA DA REQUISIÇÃO
    async function checkError(res) {
      if (!res.ok) {
        const err = await res.json();
        throw err;
      }
      return res.json();
    }
  
    // MONTAR DADOS DO FORMULÁRIO USANDO FORMDATA
    function mountDataForm() {
      const formData = new FormData(form);
      const pet = {};
      formData.forEach((v, k) => {
        pet[k] = v;
      });
      return pet;
    }
  
    // LIMPAR FORMULÁRIO E MENSAGENS DE ERRO
    function clearForm() {
      form.reset();
      clearValidationErrors();
      M.updateTextFields();
    }
  
    // LIMPAR MENSAGENS DE ERRO
    function clearValidationErrors() {
      const inputs = form.querySelectorAll('.validate');
      inputs.forEach(input => {
        input.classList.remove('valid');
        input.classList.remove('invalid');
      });
      form.classList.remove('was-validated');
    }
  </script>
  