<h1><%= title %></h1>

<!-- Botão para abrir o modal -->
<a class="btn-floating btn-large waves-effect waves-light red modal-trigger" href="#userModal" onclick="clearForm()">
    <i class="material-icons">add</i>
</a>

<!-- Modal Structure -->
<div id="userModal" class="modal">
    <div class="modal-content">
        <h4>Usuário</h4>
        <form id="userForm">
            <input type="hidden" name="id" id="id">
            <div class="input-field">
                <input required name="username" id="username" type="text" class="validate">
                <label for="username">Nome</label>
                <span class="helper-text" data-error="Nome é obrigatório"></span>
            </div>
            <div class="input-field">
                <input required name="password" id="password" type="password" class="validate">
                <label for="password">Senha</label>
                <span class="helper-text" data-error="Senha é obrigatória"></span>
            </div>
            <div class="input-field">
                <input required name="email" id="email" type="email" class="validate">
                <label for="email">Email</label>
                <span class="helper-text" data-error="Email inválido"></span>
            </div>
            <div class="input-field">
                <input required name="phone" id="phone" type="text" class="validate" placeholder="81 9 9699-2090">
                <label for="phone">Telefone</label>
                <span class="helper-text" data-error="Telefone é obrigatório"></span>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <a href="#!" class="modal-close waves-effect waves-red btn-flat" onclick="clearForm()">
            <i class="material-icons left">cancel</i>Cancelar
        </a>
        <button type="button" class="waves-effect waves-green btn-flat" onclick="submitForm()">
            <i class="material-icons left">send</i>Enviar
        </button>
    </div>
</div>

<span id="error" class="red-text"></span>

<% if (error) { %>
<span class="red-text"><%= error %></span>
<% } %>

<table class="striped">
    <thead>
        <tr>
            <% for (let col of cols) { %>
            <th><%= col %></th>
            <% } %>
        </tr>
    </thead>
    <tbody>
        <% for (let user of users) { %>
        <tr>
            <% for (let prop in user) { %>
            <td><%= user[prop] %></td>
            <% } %>
            <td>
                <a class="btn-floating btn-small waves-effect waves-light blue" onclick="editUser('<%= user.id %>')">
                    <i class="material-icons">edit</i>
                </a>
                <a class="btn-floating btn-small waves-effect waves-light red" onclick="deleteUser('<%= user.id %>')">
                    <i class="material-icons">delete</i>
                </a>
            </td>
        </tr>
        <% } %>
    </tbody>
</table>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var elems = document.querySelectorAll('.modal');
        var instances = M.Modal.init(elems);
        
        // Aplicar máscara ao campo de telefone
        var phoneInput = document.getElementById('phone');
        Inputmask({"mask": "(99) 9 9999-9999"}).mask(phoneInput);
    });

    const form = document.getElementById('userForm');

    function submitForm() {
        if (form.checkValidity()) {
            const user = mountDataForm();
            let id = user.id;
            let METHOD = id ? 'PUT' : 'POST';
            let URL = id ? `/users/${id}` : '/users';
            createOrUpdate(user, URL, METHOD);
        } else {
            form.classList.add('was-validated');
            M.updateTextFields();
            form.reportValidity();
        }
    }

    // CRIAR OU ATUALIZAR USUÁRIO
    function createOrUpdate(user, URL, METHOD) {
        fetch(URL, {
            method: METHOD,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(user)
        })
        .then(async (res) => await checkError(res))
        .then((user) => {
            form.reset();
            clearValidationErrors();
            var instance = M.Modal.getInstance(document.getElementById('userModal'));
            instance.close();
            window.location.reload();
        })
        .catch((error) => { document.getElementById('error').innerText = error; });
    }

    // BUSCAR USUÁRIO A SER EDITADO PELO ID E CARREGAR NOS INPUTS DO FORM
    function editUser(id) {
        fetch("/users/" + id, { method: "GET" })
        .then(async (res) => await checkError(res))
        .then((user) => {
            clearForm(); // Clear form before loading new data
            for (let prop in user) {
                const input = document.querySelector(`input[name="${prop}"]`);
                if (input) {
                    input.value = user[prop];
                    M.updateTextFields();
                }
            }
            var instance = M.Modal.getInstance(document.getElementById('userModal'));
            instance.open();
        })
        .catch((error) => { document.getElementById('error').innerText = error.error; });
    }

    // DELETAR UM USUÁRIO PELO ID
    function deleteUser(id) {
        fetch("/users/" + id, { method: "DELETE" })
        .then(async (res) => await checkError(res))
        .then(() => { window.location.reload(); })
        .catch((error) => { document.getElementById('error').innerText = error.error; });
    }

    // CHECAR ERROS NA RESPOSTA DA REQUISIÇÃO
    async function checkError(res) {
        if (!res.ok) {
            const err = await res.json();
            throw err;
        }
        return res.json();
    }

    // MONTAR DADOS DO FORMULÁRIO USANDO FORMDATA
    function mountDataForm() {
        const formData = new FormData(form);
        const user = {};
        formData.forEach((v, k) => {
            user[k] = v;
        });
        return user;
    }

    // LIMPAR FORMULÁRIO E MENSAGENS DE ERRO
    function clearForm() {
        form.reset();
        clearValidationErrors();
        M.updateTextFields();
    }

    // LIMPAR MENSAGENS DE ERRO
    function clearValidationErrors() {
        const inputs = form.querySelectorAll('.validate');
        inputs.forEach(input => {
            input.classList.remove('valid');
            input.classList.remove('invalid');
        });
        form.classList.remove('was-validated');
    }
</script>
